[project]
name = "mirascope"
version = "2.0.0-alpha.0"
description = "LLM abstractions that aren't obstructions"
readme = "README.md"
license = { file = "../LICENSE" }
requires-python = ">=3.10"
authors = [
    { name = "William Bakst", email = "william@mirascope.com" },
    { name = "Brendan Kao", email = "brendan@mirascope.com" },
    { name = "Dandelion ManÃ©", email = "dandelion@mirascope.com" },
]
maintainers = [{ name = "William Bakst", email = "william@mirascope.com" }]
keywords = [
    "agents",
    "artificial intelligence",
    "developer tools",
    "llm",
    "llm tools",
    "prompt engineering",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: File Formats :: JSON",
    "Topic :: File Formats :: JSON :: JSON Schema",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "docstring-parser>=0.17.0",
    "typing-extensions>=4.10.0",
]

[project.urls]
Homepage = "https://v2.mirascope.com"
Documentation = "https://v2.mirascope.com/"
Repository = "https://github.com/Mirascope/mirascope"
Issues = "https://github.com/Mirascope/mirascope/issues"
Changelog = "https://github.com/Mirascope/mirascope/releases"

[project.optional-dependencies]
anthropic = ["anthropic>=0.29.0,<1.0"]
gemini = ["google-generativeai>=0.4.0,<1", "pillow>=10.4.0,<11"]
google = ["google-genai>=1.2.0,<2", "pillow>=10.4.0,<11", "proto-plus>=1.24.0"]
openai = ["openai>=1.6.0,<2"]
mcp = ["mcp>=1.0.0,<2"]

[tool.uv]
dev-dependencies = [
    "ruff>=0.9.7",
    "pytest>=8.3.2",
    "pyright>=1.1.402",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "pre-commit>=3.8.0",
    "codespell>=2.3.0",
    "vcrpy>=7.0.0",
    "inline-snapshot>=0.26.0",
    "pytest-vcr>=1.0.2",
]


[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.inline-snapshot]
format-command="ruff check --fix-only --stdin-filename {filename} | ruff format --stdin-filename {filename}"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "venv",
    ".coveragerc",
]
line-length = 88
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*.{py}" = ["T201", "ANN"]
"typechecking/*.{py}" = ["T201", "ANN"]
"mirascope/graphs/*.{py}" = ["T201"]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "I",
    "UP",
    "YTT",
    "B",
    "T10",
    "T20",
    "C4",
    "PYI006",
    "SIM",
    "ANN",
    "RUF022",
]
ignore = ['D105', 'D107', 'D205', 'D415', 'E501', 'B011', 'B028', 'B904']
fixable = ["ALL"]
pydocstyle = { convention = 'google' }
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ['mirascope', 'tests', 'examples']

[tool.pyright]
exclude = [".venv", "docs/node_modules", "build"]
venvPath = "."
venv = ".venv"
reportUnnecessaryTypeIgnoreComment = "error"

[tool.codespell]
skip = [".git", "*.lock"]

[tool.coverage.run]
omit = []

[tool.coverage.report]
exclude_also = ["@overload", "@abstractmethod", "if TYPE_CHECKING:"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

"""Implements Response and AsyncResponse."""

import asyncio
from collections.abc import Sequence
from typing import Generic

from ..content import ToolOutput
from ..context import Context, DepsT
from ..formatting import FormatT
from ..tools import (
    AsyncContextToolkit,
    AsyncToolkit,
    ContextToolkit,
    Toolkit,
)
from .base_response import BaseResponse


class Response(BaseResponse[Toolkit, FormatT]):
    """The response generated by an LLM."""

    def execute_tools(self) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        return [self.toolkit.execute(tool_call) for tool_call in self.tool_calls]


class AsyncResponse(BaseResponse[AsyncToolkit, FormatT]):
    """The response generated by an LLM in async mode."""

    async def execute_tools(self) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        tasks = [self.toolkit.execute(tool_call) for tool_call in self.tool_calls]
        return await asyncio.gather(*tasks)


class ContextResponse(
    BaseResponse[ContextToolkit[DepsT], FormatT], Generic[DepsT, FormatT]
):
    """The response generated by an LLM from a context call."""

    def execute_tools(self, ctx: Context[DepsT]) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Args:
            ctx: A `Context` with the required deps type.

        Returns:
            A sequence containing a `ToolOutput` for every tool call.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        raise NotImplementedError


class AsyncContextResponse(
    BaseResponse[AsyncContextToolkit[DepsT], FormatT], Generic[DepsT, FormatT]
):
    """The response generated by an LLM from an async context call."""

    async def execute_tools(self, ctx: Context[DepsT]) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Args:
            ctx: A `Context` with the required deps type.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        raise NotImplementedError

"""Implements Response and AsyncResponse."""

import asyncio
from collections.abc import Sequence
from typing import Generic, overload

from ..content import ToolOutput
from ..context import Context, DepsT
from ..formatting import FormatT
from ..messages import UserContent, user
from ..tools import (
    AsyncContextToolkit,
    AsyncToolkit,
    ContextToolkit,
    Toolkit,
)
from .base_response import BaseResponse


class Response(BaseResponse[Toolkit, FormatT]):
    """The response generated by an LLM."""

    def execute_tools(self) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        return [self.toolkit.execute(tool_call) for tool_call in self.tool_calls]

    @overload
    def resume(self: "Response", content: UserContent) -> "Response": ...

    @overload
    def resume(
        self: "Response[FormatT]", content: UserContent
    ) -> "Response[FormatT]": ...

    def resume(self, content: UserContent) -> "Response | Response[FormatT]":
        """Generate a new `Response` using this response's messages with additional user content.

        Uses this response's tools and format type. Also uses this response's provider,
        model, client, and params, unless the model context manager is being used to
        provide a new LLM as an override.

        Args:
            content: The new user message content to append to the message history.

        Returns:
            A new `Response` instance generated from the extended message history.
        """
        messages = self.messages + [user(content)]
        return self.model.call(
            messages=messages, tools=self.toolkit.tools, format=self.format_type
        )


class AsyncResponse(BaseResponse[AsyncToolkit, FormatT]):
    """The response generated by an LLM in async mode."""

    async def execute_tools(self) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        tasks = [self.toolkit.execute(tool_call) for tool_call in self.tool_calls]
        return await asyncio.gather(*tasks)

    @overload
    async def resume(
        self: "AsyncResponse", content: UserContent
    ) -> "AsyncResponse": ...

    @overload
    async def resume(
        self: "AsyncResponse[FormatT]", content: UserContent
    ) -> "AsyncResponse[FormatT]": ...

    async def resume(
        self, content: UserContent
    ) -> "AsyncResponse | AsyncResponse[FormatT]":
        """Generate a new `AsyncResponse` using this response's messages with additional user content.

        Uses this response's tools and format type. Also uses this response's provider,
        model, client, and params, unless the model context manager is being used to
        provide a new LLM as an override.

        Args:
            content: The new user message content to append to the message history.

        Returns:
            A new `AsyncResponse` instance generated from the extended message history.
        """
        raise NotImplementedError


class ContextResponse(
    BaseResponse[ContextToolkit[DepsT], FormatT], Generic[DepsT, FormatT]
):
    """The response generated by an LLM from a context call."""

    def execute_tools(self, ctx: Context[DepsT]) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Args:
            ctx: A `Context` with the required deps type.

        Returns:
            A sequence containing a `ToolOutput` for every tool call.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        raise NotImplementedError

    @overload
    def resume(
        self: "ContextResponse[DepsT]", ctx: Context[DepsT], content: UserContent
    ) -> "ContextResponse[DepsT]": ...

    @overload
    def resume(
        self: "ContextResponse[DepsT, FormatT]",
        ctx: Context[DepsT],
        content: UserContent,
    ) -> "ContextResponse[DepsT, FormatT]": ...

    def resume(
        self, ctx: Context[DepsT], content: UserContent
    ) -> "ContextResponse[DepsT] | ContextResponse[DepsT, FormatT]":
        """Generate a new `ContextResponse` using this response's messages with additional user content.

        Uses this response's tools and format type. Also uses this response's provider,
        model, client, and params, unless the model context manager is being used to
        provide a new LLM as an override.

        Args:
            ctx: A `Context` with the required deps type.
            content: The new user message content to append to the message history.

        Returns:
            A new `ContextResponse` instance generated from the extended message history.
        """
        raise NotImplementedError


class AsyncContextResponse(
    BaseResponse[AsyncContextToolkit[DepsT], FormatT], Generic[DepsT, FormatT]
):
    """The response generated by an LLM from an async context call."""

    async def execute_tools(self, ctx: Context[DepsT]) -> Sequence[ToolOutput]:
        """Execute and return all of the tool calls in the response.

        Args:
            ctx: A `Context` with the required deps type.

        Returns:
            A sequence containing a `ToolOutput` for every tool call in the order they appeared.

        Raises:
            ToolNotFoundError: If one of the response's tool calls has no matching tool.
            Exception: If one of the tools throws an exception.
        """
        raise NotImplementedError

    @overload
    async def resume(
        self: "AsyncContextResponse[DepsT]", ctx: Context[DepsT], content: UserContent
    ) -> "AsyncContextResponse[DepsT]": ...

    @overload
    async def resume(
        self: "AsyncContextResponse[DepsT, FormatT]",
        ctx: Context[DepsT],
        content: UserContent,
    ) -> "AsyncContextResponse[DepsT, FormatT]": ...

    async def resume(
        self, ctx: Context[DepsT], content: UserContent
    ) -> "AsyncContextResponse[DepsT] | AsyncContextResponse[DepsT, FormatT]":
        """Generate a new `AsyncContextResponse` using this response's messages with additional user content.

        Uses this response's tools and format type. Also uses this response's provider,
        model, client, and params, unless the model context manager is being used to
        provide a new LLM as an override.

        Args:
            ctx: A Context with the required deps type.
            content: The new user message content to append to the message history.

        Returns:
            A new `AsyncContextResponse` instance generated from the extended message history.
        """
        raise NotImplementedError

"""Concrete LLM response implementation."""

from collections.abc import Sequence
from typing import TYPE_CHECKING, Any

from ..content import Text, Thinking, ToolCall
from ..formatting import FormatT
from ..messages import AssistantMessage, Message
from .base_response import BaseResponse
from .finish_reason import FinishReason

if TYPE_CHECKING:
    from ..clients import Model, Provider


class Response(BaseResponse[FormatT]):
    """The response generated by an LLM."""

    def __init__(
        self,
        *,
        provider: "Provider",
        model: "Model",
        input_messages: Sequence[Message],
        assistant_message: AssistantMessage,
        finish_reason: FinishReason | None,
        raw: Any,  # noqa: ANN401
    ) -> None:
        """Initialize a Response.

        Args:
            model: The model identifier that generated the response.
            input_messages: The message history before the final assistant message.
            assistant_message: The final assistant message containing the response content.
            raw: The raw response from the LLM.
            finish_reason: The reason why the LLM finished generating a response.
        """
        self.provider = provider
        self.model = model
        self.raw = raw
        self.finish_reason = finish_reason

        self.messages = list(input_messages) + [assistant_message]
        self.content = assistant_message.content

        self.texts, self.tool_calls, self.thinkings = [], [], []
        for part in self.content:
            if isinstance(part, Text):
                self.texts.append(part)
            elif isinstance(part, ToolCall):
                self.tool_calls.append(part)
            elif isinstance(part, Thinking):
                self.thinkings.append(part)
            else:
                raise NotImplementedError

    def format(self) -> FormatT:
        """Format the response according to the response format parser.

        It will parse the response content according to the specified format (if present)
        and return a structured object.

        Returns:
            The formatted response object of type FormatT.

        Raises:
            ValueError: If the response cannot be formatted according to the
                specified format.
        """
        raise NotImplementedError()

"""Common TypeVar definitions for the LLM module."""

from typing_extensions import ParamSpec, TypeVar

from ..content import AssistantContent, ContentChunk
from .jsonable import Jsonable

ToolReturnT = TypeVar("ToolReturnT", bound=Jsonable)
"""Type variable for tool output types.

This TypeVar represents the return type of tool functions, which must be
serializable to JSON (bound to Jsonable) for LLM consumption.
"""

P = ParamSpec("P")
"""Parameter specification for function signatures.

This ParamSpec is used to preserve function parameter types and signatures
when wrapping functions with decorators or creating generic callable types.
It captures both positional and keyword arguments (*args, **kwargs) while
maintaining their original types.
"""


FormatCovariantT = TypeVar("FormatCovariantT", covariant=True)
"""Type variable for covariant response format types.

This TypeVar is used in response formatting protocols where the type parameter
should be covariant, meaning a Protocol[Derived] is considered a subtype of
Protocol[Base] when Derived is a subtype of Base. Used in parser protocols
for response format types.
"""

ToolCovariantT = TypeVar("ToolCovariantT", covariant=True, bound=Jsonable)
"""Type variable for covariant tool return types.

This TypeVar is used in tool protocols where the type parameter should be
covariant and bound to Jsonable, ensuring tool return types are JSON-serializable.
Used in tool function protocols and decorators.
"""

ChunkT = TypeVar("ChunkT", bound=ContentChunk)
"""Type variable for a chunk of streamed content."""

AssistantContentT = TypeVar("AssistantContentT", bound=AssistantContent)
"""Type variable for a specific content type that can be generated by an LLM."""

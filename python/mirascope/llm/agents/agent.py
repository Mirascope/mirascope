"""The `Agent` class for LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass

from ..content import UserContent
from ..context import Context
from ..response_formatting import FormatT
from ..responses import Response
from ..streams import AsyncStream, Stream
from ..types import DepsT
from .base_agent import BaseAgent


@dataclass
class Agent(BaseAgent[DepsT, FormatT]):
    """Agent class for generating responses using LLMs with tools."""

    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT]:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Stream[DepsT, FormatT]:
        """Streams the response generated by running the agent loop."""
        raise NotImplementedError()

    def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

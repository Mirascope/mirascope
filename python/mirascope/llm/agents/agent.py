"""The `Agent` class for LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass

from typing_extensions import TypeVar

from ..content import UserContent
from ..context import Context
from ..responses import Response
from ..streams import AsyncStream, Stream
from .base_agent import BaseAgent

DepsT = TypeVar("DepsT", default=None)


@dataclass
class Agent(BaseAgent[DepsT]):
    """Agent class for generating responses using LLMs with tools."""

    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Stream:
        """Streams the response generated by running the agent loop."""
        raise NotImplementedError()

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

"""The `Agent` class for LLM agents."""

from abc import ABC
from collections.abc import Sequence
from dataclasses import dataclass
from typing import Generic

from ..content import UserContent
from ..context import Context, DepsT
from ..formatting import FormatT
from ..models import LLM
from ..responses import Response
from ..streams import AsyncStream, Stream
from ..tools import Tool


@dataclass
class BaseAgent(Generic[DepsT, FormatT], ABC):
    """Agent class for generating responses using LLMs with tools."""

    ctx: Context[DepsT]
    """The context for the agent, such as the history of messages."""

    tools: Sequence[Tool] | None
    """The tools available to the agent, if any."""

    format: type[FormatT] | None
    """The response format for the generated response."""

    model: LLM
    """The default model the agent will use if not specified through context."""

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[FormatT] | AsyncStream[FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()


@dataclass
class Agent(BaseAgent[DepsT, FormatT]):
    """Agent class for generating responses using LLMs with tools."""

    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[FormatT]:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    def call(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[FormatT]:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Stream[FormatT] | Stream[FormatT]:
        """Streams the response generated by running the agent loop."""
        raise NotImplementedError()


@dataclass
class AsyncAgent(BaseAgent[DepsT, FormatT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def call(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[FormatT] | AsyncStream[FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

"""The `Agent` class for LLM agents."""

from abc import ABC
from collections.abc import Sequence
from dataclasses import dataclass
from typing import Generic, overload

from ..content import UserContent
from ..context import Context, DepsT
from ..models import LLM
from ..response_formatting import FormatT
from ..responses import Response
from ..streams import AsyncStream, Stream
from ..tools import Tool


@dataclass
class BaseAgent(Generic[DepsT, FormatT], ABC):
    """Agent class for generating responses using LLMs with tools."""

    ctx: Context[DepsT]
    """The context for the agent, such as the history of messages."""

    tools: Sequence[Tool] | None
    """The tools available to the agent, if any."""

    response_format: type[FormatT] | None
    """The response format for the generated response."""

    model: LLM
    """The default model the agent will use if not specified through context."""


@dataclass
class Agent(BaseAgent[DepsT, FormatT]):
    """Agent class for generating responses using LLMs with tools."""

    @overload
    def __call__(
        self: "Agent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    @overload
    async def run_async(
        self: "Agent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    def stream(
        self: "Agent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Stream[None, FormatT]: ...

    @overload
    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Stream[DepsT, FormatT]: ...

    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Stream[DepsT, FormatT] | Stream[None, FormatT]:
        """Streams the response generated by running the agent loop."""
        raise NotImplementedError()

    @overload
    async def stream_async(
        self: "Agent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> AsyncStream[None, FormatT]: ...

    @overload
    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> AsyncStream[DepsT, FormatT]: ...

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT] | AsyncStream[None, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()


@dataclass
class AsyncAgent(BaseAgent[DepsT, FormatT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    @overload
    async def __call__(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def run_async(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def stream(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> AsyncStream[None, FormatT]: ...

    @overload
    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> AsyncStream[DepsT, FormatT]: ...

    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT] | AsyncStream[None, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def stream_async(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> AsyncStream[None, FormatT]: ...

    @overload
    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> AsyncStream[DepsT, FormatT]: ...

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT] | AsyncStream[None, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

"""The `StructuredAgent` module for creating agents with structured responses."""

from collections.abc import Sequence
from dataclasses import dataclass

from ..content import UserContent
from ..context import Context
from ..responses import Response
from ..streams import (
    AsyncStructuredStream,
    StructuredStream,
)
from ..types import DepsT, FormatT
from .base_structured_agent import (
    BaseStructuredAgent,
)


@dataclass
class StructuredAgent(BaseStructuredAgent[DepsT, FormatT]):
    """Structured agent class for generating structured responses using LLMs with tools."""

    def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT]:
        """Generates a structured response by running the agent loop."""
        raise NotImplementedError()

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT]:
        """Generates a structured response by running the agent loop asynchronously."""
        raise NotImplementedError()

    def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> StructuredStream[DepsT, FormatT]:
        """Streams the structured response generated by running the agent loop."""
        raise NotImplementedError()

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStructuredStream[DepsT, FormatT]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

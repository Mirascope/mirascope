"""The `AsyncStructuredAgent` module for creating async agents with structured responses."""

from collections.abc import Sequence
from dataclasses import dataclass

from typing_extensions import TypeVar

from ..content import UserContent
from ..context import Context
from ..responses import Response
from ..streams import AsyncStructuredStream
from ..types import DepsT
from .base_structured_agent import BaseStructuredAgent

T = TypeVar("T", bound=object | None, default=None)


@dataclass
class AsyncStructuredAgent(BaseStructuredAgent[DepsT, T]):
    """Asynchronous structured agent class for generating structured responses using LLMs with tools."""

    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[T]:
        """Generates a structured response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def call_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[T]:
        """Generates a structured response by running the agent loop asynchronously."""
        return await self(query, ctx=ctx)

    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStructuredStream[T]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStructuredStream[T]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        return await self.stream(query, ctx=ctx)

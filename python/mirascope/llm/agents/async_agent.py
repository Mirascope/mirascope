"""The `AsyncAgent` module for creating and managing asynchronous LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass
from typing import overload

from ..content import UserContent
from ..context import Context, DepsT
from ..response_formatting import FormatT
from ..responses import Response
from ..streams import AsyncStream
from .base_agent import BaseAgent


@dataclass
class AsyncAgent(BaseAgent[DepsT, FormatT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    @overload
    async def __call__(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def run_async(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> Response[None, FormatT]: ...

    @overload
    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> Response[DepsT, FormatT]: ...

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response[DepsT, FormatT] | Response[None, FormatT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def stream(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> AsyncStream[None, FormatT]: ...

    @overload
    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> AsyncStream[DepsT, FormatT]: ...

    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT] | AsyncStream[None, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    @overload
    async def stream_async(
        self: "AsyncAgent[None, FormatT]",
        query: UserContent | Sequence[UserContent],
    ) -> AsyncStream[None, FormatT]: ...

    @overload
    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT],
    ) -> AsyncStream[DepsT, FormatT]: ...

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream[DepsT, FormatT] | AsyncStream[None, FormatT]:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

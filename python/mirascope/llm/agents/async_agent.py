"""The `AsyncAgent` module for creating and managing asynchronous LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass

from ..content import UserContent
from ..context import Context
from ..responses import Response
from ..streams import AsyncStream
from ..types import DepsT
from .base_agent import BaseAgent


@dataclass
class AsyncAgent(BaseAgent[DepsT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    async def __call__(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def run_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        return await self(query, ctx=ctx)

    async def stream(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self,
        query: UserContent | Sequence[UserContent],
        *,
        ctx: Context[DepsT] | None = None,
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        return await self.stream(query, ctx=ctx)

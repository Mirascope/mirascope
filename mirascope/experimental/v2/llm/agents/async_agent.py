"""The `AsyncAgent` module for creating and managing asynchronous LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass
from typing import Generic

from typing_extensions import TypeVar

from ..content import Content
from ..contexts import Context
from ..models import LLM
from ..responses import (
    AsyncStream,
    Response,
)
from ..tools import ToolDef

DepsT = TypeVar("DepsT", default=None)


@dataclass
class AsyncAgent(Generic[DepsT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    ctx: Context[DepsT]
    """The context for the agent, such as the history of messages."""

    tools: Sequence[ToolDef] | None
    """The tools available to the agent, if any."""

    model: LLM
    """The default model the agent will use if not specified through context."""

    async def __call__(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def run_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        return await self(query, deps=deps)

    async def stream(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        return await self.stream(query, deps=deps)

"""The `AsyncAgent` module for creating and managing asynchronous LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass

from typing_extensions import TypeVar

from ..content import Content
from ..responses import (
    AsyncStream,
    Response,
)
from .base_agent import BaseAgent

DepsT = TypeVar("DepsT", default=None)


@dataclass
class AsyncAgent(BaseAgent[DepsT]):
    """Asynchronous agent class for generating responses using LLMs with tools."""

    async def __call__(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def run_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response:
        """Generates a response by running the agent loop asynchronously."""
        return await self(query, deps=deps)

    async def stream(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        return await self.stream(query, deps=deps)

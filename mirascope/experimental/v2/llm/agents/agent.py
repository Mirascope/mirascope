"""The `Agent` class for LLM agents."""

from collections.abc import Sequence
from dataclasses import dataclass

from typing_extensions import TypeVar

from ..content import Content
from ..responses import AsyncStream, ContextResponse, Stream
from .base_agent import BaseAgent

DepsT = TypeVar("DepsT", default=None)


@dataclass
class Agent(BaseAgent[DepsT]):
    """Agent class for generating responses using LLMs with tools."""

    def __call__(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> ContextResponse[DepsT]:
        """Generates a response by running the agent loop."""
        raise NotImplementedError()

    async def run_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> ContextResponse[DepsT]:
        """Generates a response by running the agent loop asynchronously."""
        raise NotImplementedError()

    def stream(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Stream:
        """Streams the response generated by running the agent loop."""
        raise NotImplementedError()

    async def stream_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStream:
        """Streams the response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

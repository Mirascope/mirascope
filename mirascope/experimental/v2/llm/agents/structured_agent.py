"""The `StructuredAgent` module for creating agents with structured responses."""

from collections.abc import Sequence
from dataclasses import dataclass
from typing import Generic

from typing_extensions import TypeVar

from ..content import Content
from ..contexts import Context
from ..models import LLM
from ..response_formatting import ResponseFormat
from ..responses import (
    AsyncStructuredStream,
    Response,
    StructuredStream,
)
from ..tools import ToolDef

DepsT = TypeVar("DepsT", default=None)
T = TypeVar("T", default=None)


@dataclass
class StructuredAgent(Generic[DepsT, T]):
    """Structured agent class for generating structured responses using LLMs with tools."""

    ctx: Context[DepsT]
    """The context for the agent, such as the history of messages."""

    response_format: ResponseFormat[T] | None
    """The response format for the agent, if any."""

    tools: Sequence[ToolDef] | None
    """The tools available to the agent, if any."""

    model: LLM
    """The default model the agent will use if not specified through context."""

    def __call__(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response[T]:
        """Generates a structured response by running the agent loop."""
        raise NotImplementedError()

    async def run_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response[T]:
        """Generates a structured response by running the agent loop asynchronously."""
        raise NotImplementedError()

    def stream(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> StructuredStream[T]:
        """Streams the structured response generated by running the agent loop."""
        raise NotImplementedError()

    async def stream_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStructuredStream[T]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

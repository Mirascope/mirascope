"""The `ContextStreamChunk` class for handling streamed chunks from contextual LLM calls."""

from dataclasses import dataclass
from typing import Generic

from typing_extensions import TypeVar

from ..context import Context
from ..types import Dataclass
from .content import ContextResponseContent

T = TypeVar("T", bound=Dataclass | None, default=None)
DepsT = TypeVar("DepsT", default=None)


@dataclass
class ContextStreamChunk(Generic[DepsT, T]):
    """A chunk of a streaming response from a contextual LLM call.

    Context stream chunks represent incremental pieces of a response that are delivered
    as they are generated by the model, allowing for real-time display and processing
    with access to the context dependencies.
    """

    content: ContextResponseContent
    """The content in this chunk of the response."""

    ctx: Context[DepsT]
    """The context associated with this stream chunk."""

    def format(self) -> T:
        """Format the content of this chunk.

        Returns:
            The formatted content of this chunk.
        """
        raise NotImplementedError()

"""The `AsyncStructuredAgent` module for creating async agents with structured responses."""

from collections.abc import Sequence
from dataclasses import dataclass

from typing_extensions import TypeVar

from ..content import Content
from ..responses import AsyncStructuredStream, Response
from ..types import Dataclass
from .base_structured_agent import BaseStructuredAgent

DepsT = TypeVar("DepsT", default=None)
T = TypeVar("T", bound=Dataclass | None, default=None)


@dataclass
class AsyncStructuredAgent(BaseStructuredAgent[DepsT, T]):
    """Asynchronous structured agent class for generating structured responses using LLMs with tools."""

    async def __call__(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response[T]:
        """Generates a structured response by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def call_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> Response[T]:
        """Generates a structured response by running the agent loop asynchronously."""
        return await self(query, deps=deps)

    async def stream(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStructuredStream[T]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        raise NotImplementedError()

    async def stream_async(
        self, query: Content | Sequence[Content], *, deps: DepsT = None
    ) -> AsyncStructuredStream[T]:
        """Streams the structured response generated by running the agent loop asynchronously."""
        return await self.stream(query, deps=deps)
